version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devicewatch-postgres
    environment:
      POSTGRES_DB: devicewatch
      POSTGRES_USER: devicewatch
      POSTGRES_PASSWORD: devicewatch123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devicewatch -d devicewatch"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devicewatch-network

  # Redis for Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: devicewatch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devicewatch-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devicewatch-backend
    environment:
      - DATABASE_URL=postgresql://devicewatch:devicewatch123@postgres:5432/devicewatch
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - devicewatch-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devicewatch-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000/ws
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - devicewatch-network

  # Device Simulator
  simulator:
    build:
      context: ./device-simulator
      dockerfile: Dockerfile
    container_name: devicewatch-simulator
    environment:
      - API_BASE_URL=http://backend:8000
      - DEVICE_COUNT=10
      - FAILURE_RATE=0.05
      - SCENARIO=mixed
      - GEOGRAPHIC_SPREAD=true
      - PROFILES=server:3,iot:4,router:3
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - devicewatch-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  devicewatch-network:
    driver: bridge

